"
A RewriteRuleBuilder is a tool for creating rewrite rules.
It provides simple GUI that allows user to create rule without knowing rewrite rule engine syntax.
After rule is created, class that will hold it, can be generated via Generate button.
Also user can open RewriteRuleBrowser using browse button.

To run it do next: RewriteRuleBuilder new openWithSpec

Instance Variables
	resultPanel:		<ResultPanel>
	rules:		<OrderedCollection>
	sourcePanel:		<SourcePanel>
	undoDict:		<OrderedCollection>

resultPanel
	- holds result of applying rewrite rule to source code; not editable

rules
	- rules, that were generated by this tool

sourcePanel
	- holds source code of expression that has to be transformet into new one; editable

undoDict
	- OrderedCollection of instances of RewriteRuleChange 

"
Class {
	#name : #RewriteRuleBuilder,
	#superclass : #SpPresenter,
	#instVars : [
		'transformationRule',
		'rules',
		'sourcePanel',
		'resultPanel',
		'statusBar',
		'inputLabel',
		'outputLabel',
		'statusBarForResult'
	],
	#category : #'RewriteTool-Core'
}

{ #category : #specs }
RewriteRuleBuilder class >> defaultSpec [
	| upperHalf arrowConstrainst inputArrow outputArrow |
	arrowConstrainst := [ :constrainsts | 
	constrainsts
		height: 40;
		width: 50 ].
	inputArrow := SpBoxLayout newVertical
		add: #inputLabel;
		add: #statusBar withConstraints: arrowConstrainst;
		yourself.
	outputArrow := SpBoxLayout newVertical
		add: #outputLabel;
		add: #statusBarForResult withConstraints: arrowConstrainst;
		yourself.
	upperHalf := SpBoxLayout newVertical
		add:
			(SpBoxLayout newHorizontal
				add: #sourcePanel;
				add: #resultPanel;
				yourself);
		add:
			(SpBoxLayout newHorizontal
				add: inputArrow;
				add: outputArrow;
				yourself)
			height: 60;
		yourself.
	^ SpBoxLayout newVertical
		add: upperHalf height: 315;
		add: #transformationRule height: 300;
		yourself
]

{ #category : #'world menu' }
RewriteRuleBuilder class >> menuCommandOn: aBuilder [
	<worldMenu>
	(aBuilder item: 'RewriteRuleBuilder')
		parent: #Tools;
		action: [ RewriteRuleBuilder new openWithSpec ];
		icon: Smalltalk ui icons configIcon
]

{ #category : #'world menu' }
RewriteRuleBuilder class >> shiftedSourceCodeMenu: aBuilder [
	<RubSmalltalkCodeMenu>
	(aBuilder item: #RewriteRuleBuilder)
		action: [ (RewriteRuleBuilder
				withCode: aBuilder model sourceTextArea selectedContents)
				openWithSpec ];
		parent: #'Source code refactoring';
		order: -1;
		icon: (self iconNamed: #configIcon);
		withSeparatorAfter
]

{ #category : #'instance creation' }
RewriteRuleBuilder class >> withCode: aString [
	| builder |
	builder := self new code: aString.
	^ builder
]

{ #category : #initialization }
RewriteRuleBuilder >> code: aString [
	self sourcePanel code: aString.
	self transformationRule matchPanel code: aString.
	self transformationRule transformPanel code: aString.
	self resultPanel code: aString
]

{ #category : #initialization }
RewriteRuleBuilder >> connectPresenters [
	self sourcePanel textModel
		whenTextIsAcceptedDo: [ self sourcePanelChanged ]
]

{ #category : #initialization }
RewriteRuleBuilder >> initialExtent [
	^ 800 @ 750
]

{ #category : #initialization }
RewriteRuleBuilder >> initializePresenters [
	self instantiateThePresenters.
	self inputLabel label: 'Input'.
	self outputLabel label: 'Output'.
	self whenBuiltDo: [ self initializeResultPanelWidget ].
	"self inputLabel
		whenBuiltDo: [ :widget | widget widget asSpAdapter hShrinkWrap ].
	self outputLabel
		whenBuiltDo: [ :widget | widget widget asSpAdapter hShrinkWrap ]"
	self inputLabel
		whenBuiltDo: [ :widget | SpMorphPresenter new morph: (widget widget) ].
	self outputLabel
		whenBuiltDo: [ :widget | SpMorphPresenter new morph: (widget widget) ]
]

{ #category : #initialization }
RewriteRuleBuilder >> initializeResultPanelWidget [
	self resultPanel textModel adapter
		color: Smalltalk ui theme class basePassiveBackgroundColor
]

{ #category : #accessing }
RewriteRuleBuilder >> inputLabel [
	^ inputLabel
]

{ #category : #initialization }
RewriteRuleBuilder >> instantiateThePresenters [
	sourcePanel := self instantiate: SourcePanel.
	resultPanel := self instantiate: ResultPanel.
	transformationRule := self instantiate: TransformationRule.
	inputLabel := self newLabel.
	outputLabel := self newLabel.
	statusBarForResult := self obtainStatusBarForResult.
	statusBar := self statusBarForMatch.
]

{ #category : #testing }
RewriteRuleBuilder >> isMatching [
	| rewriter |
	rewriter := RBParseTreeRewriter new
		replace: self transformationRule matchPanel textModel text
		with: self transformationRule transformPanel textModel text.
	^ rewriter executeTree: self sourcePanel textModel ast
]

{ #category : #'accessing colors' }
RewriteRuleBuilder >> matchColor [
	^ self isMatching
		ifTrue: [ Color green ]
		ifFalse: [ Color red ]
]

{ #category : #accessing }
RewriteRuleBuilder >> matchLabel [
	^ self isMatching
		ifTrue: [ 'Input AST matches LHS of rule.' ]
		ifFalse: [ 'Input AST does not match LHS of rule.' ]
]

{ #category : #morphic }
RewriteRuleBuilder >> obtainStatusBarForResult [
	| morph |
	morph := TransformationRule arrowMorph: ActivePolygonMorph.
	morph
		rotationDegrees: -90;
		scale: 0.6;
		infoText: self resultLabel.
	^ SpMorphPresenter new
		morph: morph;
		yourself
]

{ #category : #accessing }
RewriteRuleBuilder >> outputLabel [
	^ outputLabel
]

{ #category : #accessing }
RewriteRuleBuilder >> resultLabel [
	^ 'Result of applying rule to source code'
]

{ #category : #accessing }
RewriteRuleBuilder >> resultPanel [
	^ resultPanel
]

{ #category : #accessing }
RewriteRuleBuilder >> rules [
	^ RBTransformationRule subclasses collect: [ :each | each name ]
]

{ #category : #accessing }
RewriteRuleBuilder >> sourcePanel [
	^ sourcePanel
]

{ #category : #actions }
RewriteRuleBuilder >> sourcePanelChanged [
	self sourcePanelChangedUpdateBefore.
	self sourcePanel textModel ast: (self sourcePanel parse: self sourcePanel textModel text).
	self sourcePanel textModel text: self sourcePanel textModel ast formattedCode.
	self sourcePanelChangedUpdateAfter
]

{ #category : #actions }
RewriteRuleBuilder >> sourcePanelChangedUpdateAfter [
	self statusBar color: self matchColor.
	self statusBar widget infoText: self matchLabel.
	self transformationRule transformPanel updateNextPanelForNode: nil
]

{ #category : #actions }
RewriteRuleBuilder >> sourcePanelChangedUpdateBefore [
	self transformationRule addChangeForPanel: self sourcePanel.
	self transformationRule undoButton enable
]

{ #category : #accessing }
RewriteRuleBuilder >> statusBar [
	^ statusBar
]

{ #category : #accessing }
RewriteRuleBuilder >> statusBar: anObject [
	statusBar := anObject
]

{ #category : #morphic }
RewriteRuleBuilder >> statusBarForMatch [
	| morph |
	morph := TransformationRule arrowMorph: ActivePolygonMorph.
	morph
		rotationDegrees: 90;
		scale: 0.6;
		color: self matchColor;
		infoText: self matchLabel.
		"morph vSpaceFill;"
	^ SpMorphPresenter new
		morph: morph;
			yourself
]

{ #category : #accessing }
RewriteRuleBuilder >> title [
	^ 'Rewrite tool'
]

{ #category : #accessing }
RewriteRuleBuilder >> transformationRule [
	^ transformationRule
]
