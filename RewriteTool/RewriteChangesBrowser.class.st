"
A changes browser for the changes generated by the rewrite rule editor
"
Class {
	#name : #RewriteChangesBrowser,
	#superclass : #SpPresenter,
	#instVars : [
		'changes',
		'selectedChanges',
		'changeTree',
		'diffView',
		'buttonCancel',
		'buttonOk'
	],
	#category : #'RewriteTool-Applier'
}

{ #category : #'instance creation' }
RewriteChangesBrowser class >> changes: aCollection [

	^ self new
		changes: aCollection;
		yourself
]

{ #category : #specs }
RewriteChangesBrowser class >> defaultSpec [
	^ SpBoxLayout newVertical
		add:
			(SpPanedLayout newVertical
				add: #changeTree;
				add: #diffView;
				yourself);
		add:
			(SpBoxLayout newHorizontal
					addLast: #buttonCancel
						expand: false
						fill: true
						padding: 2;
					addLast: #buttonOk
						expand: false
						fill: false
						padding: 0;
					yourself)
			expand: false
			fill: false
			padding: 2;
		yourself
]

{ #category : #actions }
RewriteChangesBrowser >> accept [
	self okToChange
		ifFalse: [ ^ self ].
	selectedChanges isEmptyOrNil
		ifTrue: [ ^ self ].
	[ selectedChanges
		do: [ :change | RBRefactoryChangeManager instance performChange: change ] ]
		asJob
		title: 'Refactoring';
		run.
	self window delete
]

{ #category : #update }
RewriteChangesBrowser >> buildDiffFor: aChange [
	^ aChange
		ifNil: [ '' ]
		ifNotNil: [ diffView
				contextClass: aChange changeClass;
				leftText: aChange oldVersionTextToDisplay;
				rightText: aChange textToDisplay ]
]

{ #category : #actions }
RewriteChangesBrowser >> cancel [
	self window close
]

{ #category : #accessing }
RewriteChangesBrowser >> changes [
	^ changes
]

{ #category : #accessing }
RewriteChangesBrowser >> changes: anObject [
	changes := anObject.
	selectedChanges := OrderedCollection withAll: changes first changes.
	self updateChanges
]

{ #category : #initialization }
RewriteChangesBrowser >> connectPresenters [
	changeTree
		children: [ :aChange | 
			(aChange isNotNil and: [ aChange changesSize > 1 ])
				ifTrue: [ aChange changes ]
				ifFalse: [ #() ] ].
	buttonCancel action: [ self cancel ].
	buttonOk action: [ self accept ]
]

{ #category : #initialization }
RewriteChangesBrowser >> initialize [
	changes := #().
	super initialize
]

{ #category : #initialization }
RewriteChangesBrowser >> initializePresenters [
	changeTree := self newTreeTable.
	changeTree
		addColumn:
			(SpCompositeTableColumn new
				title: 'Changes';
				addColumn:
					((SpCheckBoxTableColumn
						title: ' '
						evaluated: [ :change | selectedChanges includes: change ])
						onActivation: [ :change | selectedChanges add: change ];
						onDesactivation: [ :change | selectedChanges remove: change ];
						width: 20;
						yourself);
				addColumn: (SpStringTableColumn evaluated: #nameToDisplay));
		whenActivatedDo: [ :selection | self buildDiffFor: selection selectedItem ].
	diffView := self newDiff.
	diffView showOptions: true.
	buttonCancel := self newButton label: 'Cancel'.
	buttonOk := self newButton label: 'Ok'.
	self focusOrder
		add: buttonCancel;
		add: buttonOk
]

{ #category : #initialization }
RewriteChangesBrowser >> initializeWindow: aWindowPresenter [
	| fontWidth rowHeight |
	fontWidth := StandardFonts defaultFont widthOfString: 'M'.
	rowHeight := self class inputTextHeight.
	aWindowPresenter
		title: 'Rewrite Changes Browser';
		initialExtent: 70 @ 20 * (fontWidth @ rowHeight)
]

{ #category : #'instance creation' }
RewriteChangesBrowser >> open [
	^ self openWithSpec

]

{ #category : #update }
RewriteChangesBrowser >> updateChanges [
	| aCompositeChange |
	aCompositeChange := RBRefactoryChangeManager changeFactory
		compositeRefactoryChange.
	changes do: [ :each | aCompositeChange addChange: each ].

	"Later we could filter the shown changes depending on the selected scope"
	changeTree roots: (aCompositeChange whatToDisplayIn: self)
]
