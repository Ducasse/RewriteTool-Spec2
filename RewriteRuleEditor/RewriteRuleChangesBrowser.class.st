"
A changes browser for the changes generated by the rewrite rule editor
"
Class {
	#name : #RewriteRuleChangesBrowser,
	#superclass : #SpPresenter,
	#instVars : [
		'#changes',
		'#selectedChanges',
		'#changeTree => SpObservableSlot',
		'#diffView => SpObservableSlot',
		'#buttonCancel => SpObservableSlot',
		'#buttonOk => SpObservableSlot'
	],
	#category : #'RewriteRuleEditor-Applier'
}

{ #category : #'instance creation' }
RewriteRuleChangesBrowser class >> changes: aCollection [

	^ self new
		  changes: aCollection;
		  yourself
]

{ #category : #specs }
RewriteRuleChangesBrowser class >> defaultSpec [

	^ SpBoxLayout newVertical
		  add: (SpPanedLayout newVertical
				   add: #changeTree;
				   add: #diffView;
				   yourself);
		  add: (SpBoxLayout newHorizontal
				   addLast: #buttonCancel expand: false;
				   addLast: #buttonOk expand: false;
				   yourself)
		  expand: false
		  fill: false
		  padding: 2;
		  yourself
]

{ #category : #actions }
RewriteRuleChangesBrowser >> accept [

	(self okToChange not or: [ selectedChanges isEmptyOrNil ]) ifTrue: [ 
		UIManager default inform: 'No changes to apply.'.
		^ self ].
	[ 
	selectedChanges do: [ :change | 
			RBRefactoryChangeManager instance performChange: change ] ] asJob
		title: 'Refactoring';
		run.
		self closeWindow
]

{ #category : #update }
RewriteRuleChangesBrowser >> buildDiffFor: aChange [

	^ aChange ifNil: [ '' ] ifNotNil: [ 
		  diffView
			  contextClass: aChange changeClass;
			  leftText: aChange oldVersionTextToDisplay;
			  rightText: aChange textToDisplay ]
]

{ #category : #accessing }
RewriteRuleChangesBrowser >> changes: anObject [

	changes := anObject.
	selectedChanges := OrderedCollection withAll: changes first changes.
	self updateChanges
]

{ #category : #actions }
RewriteRuleChangesBrowser >> closeWindow [

	self window close
]

{ #category : #initialization }
RewriteRuleChangesBrowser >> connectPresenters [

	changeTree children: [ :aChange | 
		(aChange isNotNil and: [ aChange changesSize > 1 ])
			ifTrue: [ aChange changes ]
			ifFalse: [ #(  ) ] ].
	buttonCancel action: [ self closeWindow ].
	buttonOk action: [ 
		self accept]
]

{ #category : #initialization }
RewriteRuleChangesBrowser >> initialize [
	changes := #().
	super initialize
]

{ #category : #initialization }
RewriteRuleChangesBrowser >> initializePresenters [

	changeTree := self newTreeTable.
	changeTree
		addColumn: (SpCompositeTableColumn new
				 title: 'Changes';
				 addColumn: ((SpCheckBoxTableColumn evaluated: [ :change | 
							   selectedChanges includes: change ])
						  onActivation: [ :change | selectedChanges add: change ];
						  onDeactivation: [ :change | selectedChanges remove: change ];
						  width: 20;
						  yourself);
				 addColumn: (SpStringTableColumn evaluated: #nameToDisplay));
		whenActivatedDo: [ :selection | 
		self buildDiffFor: selection selectedItem ];
		activateOnSingleClick.
	diffView := self newDiff
		            showOptions: true.
	buttonCancel := self newButton label: 'Cancel'.
	buttonOk := self newButton label: 'Ok'.
	self focusOrder
		add: buttonCancel;
		add: buttonOk
]

{ #category : #initialization }
RewriteRuleChangesBrowser >> initializeWindow: aWindowPresenter [

	| fontWidth rowHeight |
	fontWidth := StandardFonts defaultFont widthOfString: 'M'.
	rowHeight := self class inputTextHeight.
	aWindowPresenter
		title: 'Changes Browser';
		initialExtent: 70 @ 20 * (fontWidth @ rowHeight)
]

{ #category : #'instance creation' }
RewriteRuleChangesBrowser >> open [

	^ self openWithSpec
]

{ #category : #update }
RewriteRuleChangesBrowser >> updateChanges [

	| aCompositeChange |
	aCompositeChange := RBRefactoryChangeManager changeFactory
		                    compositeRefactoryChange.
	changes do: [ :each | aCompositeChange addChange: each ].

	"Later we could filter the shown changes depending on the selected scope"

	changeTree roots: (aCompositeChange whatToDisplayIn: self)
]
