"
A RewriteRuleBuilder is a tool for creating rewrite rules.
It provides simple GUI that allows user to create rule without knowing rewrite rule engine syntax.
After rule is created, class that will hold it, can be generated via Generate button.
Also user can open RewriteRuleBrowser using browse button.

To run it do next: RewriteRuleBuilder new openWithSpec

Instance Variables
	resultPanel:		<ResultPanel>
	rules:		<OrderedCollection>
	sourcePanel:		<SourcePanel>
	undoDict:		<OrderedCollection>

resultPanel
	- holds result of applying rewrite rule to source code; not editable

rules
	- rules, that were generated by this tool

sourcePanel
	- holds source code of expression that has to be transformet into new one; editable

undoDict
	- OrderedCollection of instances of RewriteRuleChange 

"
Class {
	#name : #RewriteRuleBuilderPresenter,
	#superclass : #SpPresenter,
	#instVars : [
		'transformationRule',
		'rules',
		'sourcePanel',
		'resultPanel',
		'statusBar',
		'inputLabel',
		'outputLabel',
		'statusBarForResult'
	],
	#category : #'RewriteToolToRefactor-ExampleBasedEditor'
}

{ #category : #specs }
RewriteRuleBuilderPresenter class >> defaultSpec [
	| upperHalf arrowConstrainst inputArrow outputArrow |
	arrowConstrainst := [ :constrainsts | 
	constrainsts
		height: 40;
		width: 50 ].
	inputArrow := SpBoxLayout newVertical
		add: #inputLabel;
		add: #statusBar withConstraints: arrowConstrainst;
		yourself.
	outputArrow := SpBoxLayout newVertical
		add: #outputLabel;
		add: #statusBarForResult withConstraints: arrowConstrainst;
		yourself.
	upperHalf := SpBoxLayout newVertical
		add:
			(SpBoxLayout newHorizontal
				add: #sourcePanel;
				add: #resultPanel;
				yourself);
		add:
			(SpBoxLayout newHorizontal
				add: inputArrow;
				add: outputArrow;
				yourself)
			height: 60;
		yourself.
	^ SpBoxLayout newVertical
		add: upperHalf height: 315;
		add: #transformationRule height: 300;
		yourself
]

{ #category : #'world menu' }
RewriteRuleBuilderPresenter class >> menuCommandOn: aBuilder [

	"<worldMenu>
	(aBuilder item: #RewriteRuleBuilder)
		parent: #Tools;
		order: 40;
		action: [ self new openWithSpec ];
		icon: (self iconNamed: #configIcon)"
]

{ #category : #'world menu' }
RewriteRuleBuilderPresenter class >> shiftedSourceCodeMenu: aBuilder [
	<RubSmalltalkCodeMenu>
	(aBuilder item: #RewriteRuleBuilderPresenter)
		action: [ (self withCode: aBuilder model sourceTextArea selectedContents) openWithSpec ];
		parent: #'Source code refactoring';
		order: -1;
		icon: (self iconNamed: #configIcon);
		withSeparatorAfter
]

{ #category : #'instance creation' }
RewriteRuleBuilderPresenter class >> withCode: aString [
	| builder |
	builder := self new code: aString.
	^ builder
]

{ #category : #initialization }
RewriteRuleBuilderPresenter >> code: aString [
	self sourcePanel code: aString.
	self transformationRule searchForPanel code: aString.
	self transformationRule replaceWithPanel code: aString.
	self resultPanel code: aString
]

{ #category : #initialization }
RewriteRuleBuilderPresenter >> connectPresenters [
	self sourcePanel codePresenter
		whenSubmitDo: [ self sourcePanelChanged ]
]

{ #category : #initialization }
RewriteRuleBuilderPresenter >> initialExtent [
	^ 800 @ 750
]

{ #category : #initialization }
RewriteRuleBuilderPresenter >> initializePresenters [
	self instantiateThePresenters.
	self inputLabel label: 'Input'.
	self outputLabel label: 'Output'.
	self whenBuiltDo: [ self initializeResultPanelWidget ].
	"self inputLabel
		whenBuiltDo: [ :widget | widget widget asSpAdapter hShrinkWrap ].
	self outputLabel
		whenBuiltDo: [ :widget | widget widget asSpAdapter hShrinkWrap ]"
	self inputLabel
		whenBuiltDo: [ :widget | SpMorphPresenter new morph: (widget widget) ].
	self outputLabel
		whenBuiltDo: [ :widget | SpMorphPresenter new morph: (widget widget) ]
]

{ #category : #initialization }
RewriteRuleBuilderPresenter >> initializeResultPanelWidget [
	self resultPanel codePresenter adapter
		color: self theme class basePassiveBackgroundColor
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> inputLabel [
	^ inputLabel
]

{ #category : #initialization }
RewriteRuleBuilderPresenter >> instantiateThePresenters [
	sourcePanel := self instantiate: SourceCodePresenter.
	resultPanel := self instantiate: ResultCodePresenter.
	transformationRule := self instantiate: TransformationRule.
	inputLabel := self newLabel.
	outputLabel := self newLabel.
	statusBarForResult := self obtainStatusBarForResult.
	statusBar := self obtainStatusBarForMatch.
]

{ #category : #testing }
RewriteRuleBuilderPresenter >> isMatching [
	| rewriter |
	rewriter := RBParseTreeRewriter new
		replace: self transformationRule searchForPanel codePresenter text
		with: self transformationRule replaceWithPanel codePresenter text.
	^ rewriter executeTree: self sourcePanel codePresenter ast
]

{ #category : #'accessing colors' }
RewriteRuleBuilderPresenter >> matchColor [
	^ self isMatching
		ifTrue: [ Color green ]
		ifFalse: [ Color red ]
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> matchLabel [
	^ self isMatching
		ifTrue: [ 'Input AST matches LHS of rule.' ]
		ifFalse: [ 'Input AST does not match LHS of rule.' ]
]

{ #category : #morphic }
RewriteRuleBuilderPresenter >> obtainStatusBarForMatch [
	| morph |
	morph := TransformationRule arrowMorph: ActivePolygonMorph.
	morph
		rotationDegrees: 90;
		scale: 0.6;
		"color: self matchColor;"
			color: Color green;
		"infoText: self matchLabel."
			infoText: ''.
	"morph vSpaceFill;"
	^ SpMorphPresenter new
		morph: morph;
		yourself
]

{ #category : #morphic }
RewriteRuleBuilderPresenter >> obtainStatusBarForResult [
	| morph |
	morph := TransformationRule arrowMorph: ActivePolygonMorph.
	morph
		rotationDegrees: -90;
		scale: 0.6;
		infoText: self resultLabel.
	^ SpMorphPresenter new
		morph: morph;
		yourself
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> outputLabel [
	^ outputLabel
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> resultLabel [
	^ 'Result of applying rule to source code'
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> resultPanel [
	^ resultPanel
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> rules [
	^ RBTransformationRule subclasses collect: [ :each | each name ]
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> sourcePanel [
	^ sourcePanel
]

{ #category : #actions }
RewriteRuleBuilderPresenter >> sourcePanelChanged [
	"self sourcePanelChangedUpdateBefore."
	self sourcePanel textModel ast: (self sourcePanel parse: self sourcePanel textModel text).
	self sourcePanel textModel text: self sourcePanel textModel ast formattedCode.
	self sourcePanelChangedUpdateAfter
]

{ #category : #actions }
RewriteRuleBuilderPresenter >> sourcePanelChangedUpdateAfter [
	self statusBar color: self matchColor.
	self statusBar morph infoText: self matchLabel.
	self transformationRule replaceWithPanel updateNextPanelForNode: nil
]

{ #category : #actions }
RewriteRuleBuilderPresenter >> sourcePanelChangedUpdateBefore [
	self transformationRule addChangeForPanel: self sourcePanel.
	self transformationRule undoButton enable

	
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> statusBar [
	^ statusBar
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> statusBar: anObject [
	statusBar := anObject
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> title [
	^ 'Rewrite tool'
]

{ #category : #accessing }
RewriteRuleBuilderPresenter >> transformationRule [
	^ transformationRule
]
